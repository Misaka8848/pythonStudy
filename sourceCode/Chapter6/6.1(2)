def sanitize(time_string):#字符串规整，返回格式化字符串
    if "-" in time_string:
        splitter = "-"
    elif ":" in time_string:
        splitter = ":"
    else:
        return time_string
    (min, secs) = time_string.split(splitter)
    return min + "." + secs


def get_coatch_data(filename):#返回选手数据字典
    try:
        with open(filename) as f:
            data = f.readline()
        data_list = data.strip().split(",")
        data_dic = {}
        (data_dic["Name"], data_dic["Dob"], data_dic["Speed"]) = data_list.pop(0), data_list.pop(0), data_list
        return data_dic
    except IOError as ioerr:
        print("File error: " + str(ioerr))
        return None


class Athlete:#创建Athlete类
    def __init__(self, a_name, a_dob=None, a_times=[]):
        self.name = a_name
        self.dob = a_dob
        self.times = a_times

    def top3(self):
        return sorted(set([sanitize(t) for t in self.times]))[0:3]

    def addtime(self, timevalue):
        self.times.append(timevalue)

    def addtimes(self, list_of_times):
        self.times.extend(list_of_times)


'''#输出运动员字典值
sarah_dic = get_coatch_data("sarah2.txt")
print(sarah_dic["Name"] + "'s birthday is " + sarah_dic["Dob"] + "speed is " +
      str(sorted(set([sanitize(t) for t in sarah_dic["Speed"]]))[0:3]))
'''


'''用字典的数据作为sarah的Athlete对象新实例的参数
sarahdata = get_coatch_data("sarah2.txt")
sarah = Athlete(sarahdata["Name"], sarahdata["Dob"], sarahdata["Speed"])
print(str(sarah.top3()))
'''

'''用新方法创建刘翔的time
LiuXiang = Athlete("LiuXiang")
LiuXiang.addtime("0.9")
LiuXiang.addtimes(["0.1", "0.2", "0-12"])
print(LiuXiang.top3())
'''